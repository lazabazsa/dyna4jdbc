package com.github.dyna4jdbc.internal.connection.scriptengine;

import com.github.dyna4jdbc.internal.ClosableSQLObject;
import com.github.dyna4jdbc.internal.SQLError;

import javax.script.ScriptEngine;
import javax.script.ScriptException;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;

class ScriptEngineStatement extends ClosableSQLObject implements java.sql.Statement {

    private final ScriptEngineConnection scriptEngineConnection;
    private SingleStringResultSet resultSet;

    public ScriptEngineStatement(ScriptEngineConnection scriptEngineConnection) {
        this.scriptEngineConnection = scriptEngineConnection;
    }

    public ResultSet executeQuery(String sql) throws SQLException {
        return null;
    }

    public boolean execute(final String sql) throws SQLException {

        final Writer writer = new StringWriter();
        final PrintWriter printWriter = new PrintWriter(writer);

        try {
            scriptEngineConnection.executeUsingScriptEngine(new ScriptEngineConnection.ScriptEngineCallback<Void>() {
                public Void execute(ScriptEngine engine) throws ScriptException {

                    engine.getContext().setWriter(printWriter);

                    engine.eval(sql);

                    return null;
                }
            });

        } catch (Exception e) {
            throw new SQLException(e.getMessage(), e);
        }

        String string = writer.toString();

        if(string.isEmpty()) {
            return false;

        } else {

            resultSet = new SingleStringResultSet(string, this);
            return true;
        }

    }

    public int executeUpdate(final String sql) throws SQLException {

        try {
            scriptEngineConnection.executeUsingScriptEngine(new ScriptEngineConnection.ScriptEngineCallback<Void>() {
                public Void execute(ScriptEngine engine) throws ScriptException {

                        engine.getContext().setWriter(
                                DisallowAllWritesPrintWriter.forMessage(
                                        SQLError.USING_STDOUT_FROM_UPDATE.toString()));

                        engine.eval(sql);

                    return null;
                }
            });

        } catch (Exception e) {
            throw new SQLException(e.getMessage(), e);
        }

        return 0;
    }

    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        return 0;
    }

    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        return 0;
    }

    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        return 0;
    }

    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        return false;
    }

    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        return false;
    }

    public boolean execute(String sql, String[] columnNames) throws SQLException {
        return false;
    }

    public int getMaxFieldSize() throws SQLException {
        return 0;
    }

    public void setMaxFieldSize(int max) throws SQLException {

    }

    public int getMaxRows() throws SQLException {
        return 0;
    }

    public void setMaxRows(int max) throws SQLException {

    }

    public void setEscapeProcessing(boolean enable) throws SQLException {

    }

    public int getQueryTimeout() throws SQLException {
        return 0;
    }

    public void setQueryTimeout(int seconds) throws SQLException {

    }

    public void cancel() throws SQLException {

    }

    public SQLWarning getWarnings() throws SQLException {
        return null;
    }

    public void clearWarnings() throws SQLException {

    }

    public void setCursorName(String name) throws SQLException {

    }


    public ResultSet getResultSet() throws SQLException {
        SingleStringResultSet resultSetToReturn = this.resultSet;
        this.resultSet = null;
        return resultSetToReturn;
    }

    public int getUpdateCount() throws SQLException {
        return 0;
    }

    public boolean getMoreResults() throws SQLException {
        return this.resultSet != null;
    }

    public void setFetchDirection(int direction) throws SQLException {

    }

    public int getFetchDirection() throws SQLException {
        return 0;
    }

    public void setFetchSize(int rows) throws SQLException {

    }

    public int getFetchSize() throws SQLException {
        return 0;
    }

    public int getResultSetConcurrency() throws SQLException {
        return 0;
    }

    public int getResultSetType() throws SQLException {
        return 0;
    }

    public void addBatch(String sql) throws SQLException {

    }

    public void clearBatch() throws SQLException {

    }

    public int[] executeBatch() throws SQLException {
        return new int[0];
    }

    public Connection getConnection() throws SQLException {
        return scriptEngineConnection;
    }

    public boolean getMoreResults(int current) throws SQLException {
        return false;
    }

    public ResultSet getGeneratedKeys() throws SQLException {
        return new EmptyResultSet();
    }


    public int getResultSetHoldability() throws SQLException {
        return 0;
    }

    public void setPoolable(boolean poolable) throws SQLException {

    }

    public boolean isPoolable() throws SQLException {
        return false;
    }

    public void closeOnCompletion() throws SQLException {

    }

    public boolean isCloseOnCompletion() throws SQLException {
        return false;
    }

    public <T> T unwrap(Class<T> iface) throws SQLException {
        return null;
    }

    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return false;
    }
}
